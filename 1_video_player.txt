// video player with progress bar skip - fullscreen mode.

// widgets/video_player_widget.dart
import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';

class VideoPlayerWidget extends StatefulWidget {
  final String url;

  const VideoPlayerWidget({required this.url});

  @override
  _VideoPlayerWidgetState createState() => _VideoPlayerWidgetState();
}

class _VideoPlayerWidgetState extends State<VideoPlayerWidget> {
  late VideoPlayerController _controller;
  bool _showControls = false;
  double _volume = 0.5;

  @override
  void initState() {
    super.initState();
    _controller = VideoPlayerController.network(widget.url)
      ..initialize().then((_) {
        setState(() {});
      });
    _controller.setVolume(_volume);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void _toggleControls() {
    setState(() {
      _showControls = !_showControls;
    });
  }

  void _adjustVolume(double newVolume) {
    setState(() {
      _volume = newVolume.clamp(0.0, 1.0);
      _controller.setVolume(_volume);
    });
  }

  String _formatDuration(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return '${duration.inHours > 0 ? '${twoDigits(duration.inHours)}:' : ''}$minutes:$seconds';
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: _controller.value.isInitialized
          ? AspectRatio(
              aspectRatio: _controller.value.aspectRatio,
              child: Stack(
                alignment: Alignment.bottomCenter,
                children: [
                  GestureDetector(
                    onTap: _toggleControls,
                    child: VideoPlayer(_controller),
                  ),
                  if (_showControls)
                    Positioned.fill(
                      child: Container(
                        color: Colors.black45.withOpacity(0.7),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.end,
                          children: [
                            // Progress Bar with Timestamps
                            Row(
                              children: [
                                Padding(
                                  padding: const EdgeInsets.symmetric(horizontal: 8.0),
                                  child: Text(
                                    _formatDuration(_controller.value.position),
                                    style: TextStyle(color: Colors.white),
                                  ),
                                ),
                                Expanded(
                                  child: VideoProgressIndicator(
                                    _controller,
                                    allowScrubbing: true,
                                    colors: VideoProgressColors(
                                      playedColor: Colors.blue,
                                      bufferedColor: Colors.grey,
                                      backgroundColor: Colors.black26,
                                    ),
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.symmetric(horizontal: 8.0),
                                  child: Text(
                                    _formatDuration(_controller.value.duration),
                                    style: TextStyle(color: Colors.white),
                                  ),
                                ),
                              ],
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                IconButton(
                                  icon: Icon(Icons.replay_10, color: Colors.white),
                                  onPressed: () {
                                    final position = _controller.value.position;
                                    _controller.seekTo(position - Duration(seconds: 10));
                                  },
                                ),
                                IconButton(
                                  icon: Icon(
                                    _controller.value.isPlaying
                                        ? Icons.pause
                                        : Icons.play_arrow,
                                    color: Colors.white,
                                  ),
                                  onPressed: () {
                                    setState(() {
                                      _controller.value.isPlaying
                                          ? _controller.pause()
                                          : _controller.play();
                                    });
                                  },
                                ),
                                IconButton(
                                  icon: Icon(Icons.forward_10, color: Colors.white),
                                  onPressed: () {
                                    final position = _controller.value.position;
                                    _controller.seekTo(position + Duration(seconds: 10));
                                  },
                                ),
                                IconButton(
                                  icon: Icon(Icons.volume_up, color: Colors.white),
                                  onPressed: () => _adjustVolume(_volume + 0.1),
                                ),
                                IconButton(
                                  icon: Icon(Icons.fullscreen, color: Colors.white),
                                  onPressed: () {
                                    Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                        builder: (context) => Scaffold(
                                          backgroundColor: Colors.black,
                                          body: Center(
                                            child: GestureDetector(
                                              onTap: _toggleControls,
                                              child: AspectRatio(
                                                aspectRatio: _controller.value.aspectRatio,
                                                child: VideoPlayer(_controller),
                                              ),
                                            ),
                                          ),
                                        ),
                                      ),
                                    );
                                  },
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                ],
              ),
            )
          : CircularProgressIndicator(),
    );
  }
}
